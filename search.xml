<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>java web中tomcat在本地的函数式部署</title>
      <link href="/2020/04/24/tomcat/"/>
      <url>/2020/04/24/tomcat/</url>
      
        <content type="html"><![CDATA[<p>很多童鞋在开发应用程序的时候，对IDE的要求很高，而且喜欢折腾各种插件。</p><p>以Java Web开发为例，大家都知道，开发Java Web程序，就是基于Servlet编程。从代码到部署，有4个步骤：</p><ul><li>编写Servlet</li><li>打包为war文件</li><li>复制到Tomcat的webapps目录下</li><li>启动Tomcat</li></ul><p>这个过程是不是很繁琐？如果我们想在IDE中断点调试，还需要打开Tomcat的远程调试端口并且连接上去。</p><p>许多初学者经常卡在如何在IDE中启动Tomcat并加载webapp，更不要说断点调试了。老手对于配置插件、处理不同版本差异上估计也只能靠搜索解决。并且，在团队开发中，不同系统环境的差异带来的插件配置问题更多。</p><p>所谓使用插件，无非就是我们在IDE中配置好了，由插件来自动完成上述任务。但是，越是复杂的任务，图形化的插件越不稳定。IDE中插件越多，他们之间互相冲突的概率也越大。</p><p>我们不是反对使用插件，而是说，使用IDE和插件的时候，最好依赖IDE的核心功能，对于日常提升便捷性的任务，使用插件没有问题。</p><p>还是以Java Web开发为例，如果要调试Web程序，是不是一定要启动Tomcat、配置webapp、打开远程调试呢？</p><p>其实并不需要。IDE对于启动、调试通过main()方法的普通Java程序是极其可靠而且稳定的，因为它就是本地JVM，而远程调试，外加动态配置服务器，就不那么稳定，尤其是一旦某些地方配置出了问题，很难排查，白白把时间浪费在配置开发环境上。</p><p>并且，在一台电脑上配置的这些经验可能换一台机器就不行了，在大公司有过大型项目开发经验的童鞋可以比赛一下搭建开发环境所需要的时间。</p><p>因此，要提升开发效率，调试webapp，最好使用简单可靠，能像普通Java程序一样，直接在IDE中启动并调试webapp的方法。</p><p>因为Tomcat实际上也是一个Java程序，我们看看Tomcat的启动流程：</p><ul><li>启动JVM并执行Tomcat的main()方法；</li><li>加载war并初始化Servlet；</li><li>正常服务。</li></ul><p>启动Tomcat无非就是设置好classpath并执行Tomcat某个jar包的main()方法，我们完全可以把Tomcat的jar包全部引入进来，然后自己编写一个main()方法，先启动Tomcat，然后让它加载我们的webapp就行。</p><p>实际上，通过Maven引入Tomcat依赖后，我们可以编写一个main()方法，直接启动Tomcat服务器：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 启动Tomcat:</span>        Tomcat tomcat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tomcat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tomcat<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">getInteger</span><span class="token punctuation">(</span><span class="token string">"port"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tomcat<span class="token punctuation">.</span><span class="token function">getConnector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建webapp:</span>        Context ctx <span class="token operator">=</span> tomcat<span class="token punctuation">.</span><span class="token function">addWebapp</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"src/main/webapp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        WebResourceRoot resources <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StandardRoot</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>        resources<span class="token punctuation">.</span><span class="token function">addPreResources</span><span class="token punctuation">(</span>                <span class="token keyword">new</span> <span class="token class-name">DirResourceSet</span><span class="token punctuation">(</span>resources<span class="token punctuation">,</span> <span class="token string">"/WEB-INF/classes"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"target/classes"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">setResources</span><span class="token punctuation">(</span>resources<span class="token punctuation">)</span><span class="token punctuation">;</span>        tomcat<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tomcat<span class="token punctuation">.</span><span class="token function">getServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样，我们直接运行main()方法，即可启动嵌入式Tomcat服务器，然后，通过预设的<font color="orange">tomcat.addWebapp(“”, new File(“src/main/webapp”)</font>，Tomcat会自动加载当前工程作为根webapp，整个过程就是一个普通的Java程序，在IDE环境中启动和调试，并不需要任何插件，甚至连本地安装Tomcat的步骤都省了。</p><p>通过main()方法启动Tomcat服务器并加载我们自己的webapp有如下好处：</p><ul><li>启动简单，无需下载Tomcat或安装任何IDE插件；</li><li>调试方便，可在IDE中使用断点调试；</li><li>使用Maven创建war包后，也可以正常部署到独立的Tomcat服务器中。</li></ul><hr><p>对SpringBoot有所了解的童鞋可能知道，SpringBoot也支持在main()方法中一行代码直接启动Tomcat，并且还能方便地更换成Jetty等其他服务器。它的启动方式和我们介绍的是基本一样的，可见，编写几行样板代码直接启动整个服务器+webapp是多么方便。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JAVAWEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javaweb </tag>
            
            <tag> webapp </tag>
            
            <tag> tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用CDN与云存储加速网站静态资源读取的方法</title>
      <link href="/2020/04/22/cdn/"/>
      <url>/2020/04/22/cdn/</url>
      
        <content type="html"><![CDATA[<h1 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h1><p>CDN的全称是Content Delivery Network，即内容分发网络。其基本思路是尽可能避开互联网上有可能影响数据传输速度和稳定性的瓶颈和环节，使内容传输的更快、更稳定。通过在网络各处放置节点服务器所构成的在现有的互联网基础之上的一层智能虚拟网络，CDN系统能够实时地根据网络流量和各节点的连接、负载状况以及到用户的距离和响应时间等综合信息将用户的请求重新导向离用户最近的服务节点上。其目的是使用户可就近取得所需内容，解决 Internet网络拥挤的状况，提高用户访问网站的响应速度。</p><h1 id="用七牛云CDN加速你的网站"><a href="#用七牛云CDN加速你的网站" class="headerlink" title="用七牛云CDN加速你的网站"></a>用七牛云CDN加速你的网站</h1><h2 id="1-七牛云注册及使用"><a href="#1-七牛云注册及使用" class="headerlink" title="1.七牛云注册及使用"></a>1.七牛云注册及使用</h2><ul><li><p>国内提供CDN加速的大厂有很多，阿里云、腾讯云、百度云、七牛云等等，我只试了<font color="orange">阿里云与七牛云</font>，其他可以自行测试。</p></li><li><p>七牛云是国内老牌的云加速服务提供商，也是对萌新比较友好的云服务提供商。</p></li><li><p>七牛云账户注册链接：<a href="https://portal.qiniu.com/signup?code=1hjikpp1nofv6" target="_blank" rel="noopener">官网</a></p></li><li><p>注册之后需要进行实名认证（正规的云服务提供商都需要的），认证需要一段时间</p></li><li><p>认证完成，登录，到主页后点击对象存储</p></li><li><p><img src="http://cdn.lyhzone.com/article_img/20200422154706.png" alt="对象存储"></p></li></ul><p>填好自定义的存储空间名称，区域自选，选择公开空间，最后点击创建即可创建成功。</p><ul><li><img src="http://cdn.lyhzone.com/article_img/20200422154816.png" alt="创建存储空间"></li></ul><h2 id="2-绑定域名"><a href="#2-绑定域名" class="headerlink" title="2.绑定域名"></a>2.绑定域名</h2><p>空间创建好了，接下来需要给这个空间绑定域名，注意：<font color="orange">需要已备案的域名</font>。</p><ul><li><p>域名注册、申请、备案需要一个月以上的时间，请先备案域名再尝试搭建网站，否则网站会无法解析使用</p></li><li><p>在七牛云创建好存储空间后，七牛云会为这个空间创建一个“CNAME域名”，但这个域名不能直接用，需要用你自己给的域名映射到这个CNAME域名中才可以使用。</p></li><li><p>以我的空间为例：我已经有了一个备案过的顶级域名：<br><font color="orange">lyhzone.com</font>，<br>因此我使用二级域名<br><font color="orange">cdn.lyhzone.cn</font><br>作为我的加速域名。由于我的域名是在阿里云申请的，因此我到阿里云的域名管理界面，把<br><font color="orange">cdn.lyhzone.cn</font><br>绑定到已经申请的空间的<br><font color="orange">CNAME</font><br>上，就这样完成了映射。</p></li></ul><p>访问流程是 cdn.lyhzone.cn —&gt; CNAME —&gt;lyhzone.com—&gt;IP。</p><ul><li><p>具体操作步骤：对象存储—空间管理-空间名称“XXX”-绑定加速域名-输入域名相关信息</p></li><li><p><img src="http://cdn.lyhzone.com/article_img/20200422132713.png" alt=""></p></li><li><p>加速域名写你的顶级域名的任意二级域名，如XXX.XXX.com</p></li><li><p>通信协议选择HTTP,覆盖范围中国大陆，使用场景图片小文件，最后的缓存配置选推荐</p></li><li><p>创建完成，得到加速域名的cname，返回域名服务提供商，进行cname解析，以我的阿里云域名解析为例，这里应该是</p></li><li><p><img src="http://cdn.lyhzone.com/article_img/20200422133216.png" alt=""></p></li><li><p>具体设置<img src="http://cdn.lyhzone.com/article_img/20200422133335.png" alt=""></p></li><li><p>填写教程：记录类型-CNAME 主机记录-二级域名的前缀 解析线路-默认 记录值-七牛云给出的CNAME</p></li><li><p>保存完后需要过一段时间才能成功，你可以在七牛云的界面上监控状态。</p></li></ul><h2 id="3-源站域名加速"><a href="#3-源站域名加速" class="headerlink" title="3.源站域名加速"></a>3.源站域名加速</h2><ul><li><p>打开七牛的控制台，选择融合CDN模块，点添加域名</p></li><li><p>填写方法如上，只有<font color="orange">源站配置</font>之后需要更改</p></li><li><p>源站配置选择源站域名，源站域名就填pages服务要求您绑定的CNAME地址。比如gihub.io,coding.me，回源为你的二级加速域名</p></li><li><p><img src="http://cdn.lyhzone.com/article_img/20200422134000.png" alt=""></p></li><li><p>源站测试方法为在你的博客根目录下的source文件夹里创建一个text.txt文件，内容为test（随意，越短越好）</p></li><li><p>接下来在博客文件夹目录下git bath here </p><pre class="line-numbers language-java"><code class="language-java">hexo cleanhexo ghexo g<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>源站测试，填入text.txt,点击测试，通过，完成。</p></li></ul><h1 id="基于云存储和picgo，深度优化图片加载速度"><a href="#基于云存储和picgo，深度优化图片加载速度" class="headerlink" title="基于云存储和picgo，深度优化图片加载速度"></a>基于云存储和picgo，深度优化图片加载速度</h1><ul><li>CDN的特性决定了有时候你更新的文章以及图片无法及时抓取更新，尤其是当你新发布的文章包含了大量图片的时候，更新不及时是种很糟糕的体验。</li></ul><p><strong>So以七牛的云存储和Picgo程序为例，我们来尝试一下图片的快速上传及读取</strong></p><ul><li><p>在七牛云的空间/文件管理/中，有提供限制存储空间及流量的有限云存储服务（类似百度云网盘）。通过Picgo我们可以达到快速地上传图片并生成外链置入Markdown中，这样我们无论写文章还是用户读文章，体验都是很优秀的。</p></li><li><p>在<font color="orange">空间已绑定域名</font>之后，下载picgo</p></li><li><p>picgo的github开源链接：<a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener">picgo</a></p></li><li><p>下载并安装完毕后，进入picgo-七牛图床设置-填入<font color="orange">AK和SK</font>（<font color="orange">公有密钥</font>和<font color="orange">私有密钥</font>）</p></li><li><p>AK和SK从你的 七牛云空间-个人密钥管理 获得，以我的为例<br><img src="http://cdn.lyhzone.com/article_img/20200422154957.png" alt="密钥获得"></p></li></ul><hr><ul><li>大功告成，现在你就可以使用Picgo和云存储的组合在markdown上快速写文章、上传图片了，访问自己的博客网站读取图片也不会过于缓慢了！</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> web开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javaweb </tag>
            
            <tag> CDN </tag>
            
            <tag> 云存储 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最现代的Java IDE——IntelliJ IDEA使用入门</title>
      <link href="/2020/04/21/idea/"/>
      <url>/2020/04/21/idea/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>对于我而言，IDEA是我目前使用过最有沉浸感的IDE，没有之一。极其优秀的上下文感知，同时检索你的整个项目，分析项目所有的内容，甚至构建语法树。在任何时候无论将鼠标放置在哪里，IDEA都知道我在哪里并知道在那能干什么。我想这也是JetBrains员工命名IDEA为intelligent的原因。</p><h1 id="IDEA的下载、安装、激活"><a href="#IDEA的下载、安装、激活" class="headerlink" title="IDEA的下载、安装、激活"></a>IDEA的下载、安装、激活</h1><h2 id="1-下载"><a href="#1-下载" class="headerlink" title="1.下载"></a>1.下载</h2><p>IntelliJ IDEA 有旗舰版和社区版本之分，其中<font color="orange">旗舰版（Ultimate Edition）</font>为收费版本（3000多人民币一年），但有 30 天试用期。如果你是学生、老师、开源项目参与者都可以向官网申请免费旗舰版，具体你可以查看下面教程。<font color="orange">社区版（Community Edition）</font>为免费版本，功能较旗舰版少了很多（不推荐）。</p><p>IntelliJ IDEA官网：<a href="https://www.jetbrains.com/idea/" target="_blank" rel="noopener">官网</a></p><ul><li><p>打开官网，点击Download </p></li><li><p>进入到下载页面</p></li></ul><p><img src="http://cdn.lyhzone.com/article_img/20200422111042.png" alt="下载"></p><ul><li><p>选择操作系统（Windows、macOS 、Linux）</p></li><li><p>选择IDEA的版本（Ultimate终极版、Community社区版）</p></li><li><p>选择IDEA下载文件的格式（.exe可执行程序、.zip压缩包格式）</p></li><li><p>点击【.EXE】下拉箭头，选择下载文件的格式【.exe可执行程序或者.zip压缩包格式】</p></li><li><p>点击Download，下载文件</p><p>这里不用考虑软件是32位还是64位的问题，在软件安装的过程中，在Create Desktop shortcut（创建桌面快捷方式）的界面，可以根据自己的操作系统位数进行选择；</p></li></ul><h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h2><p>安装环境：Win10 64位，下载的是exe文件；</p><ul><li><p>下载完成后，直接双击exe文件运行；</p></li><li><p>在【Welcome to the IntelliJ IDEA Setup 】窗口，点击【 Next&gt; 】；</p></li><li><p>在【Choose Install Location】窗口，点击【 Browse… 】选择安装路径，或者使用默认的安装路径，然后点击【 Next&gt; 】；</p></li><li><p>在【 Installation Options 】窗口，在【 Create Desktop shortcut 】中根据自身操作系统的位数选择32位或者64位，在【 Create Associations】中，根据自己的需要创建关联文件；</p></li><li><p>在【 Choose Start Menu Folder 】窗口中，保持默认设置即可，点击【 Install 】开始安装；</p></li><li><p>进入【 Installing 】正在安装窗口，等待安装完成；</p></li><li><p>安装结束，进入【 Completing IntelliJ IDEA Setup 】窗口，勾选【Run  IntelliJ IDEA】，点击【 Finish 】，启动IDEA。</p></li></ul><p>【 注意：如果电脑中已有旧版本，此时安装新版本会略有不同。】</p><h2 id="3-edu激活"><a href="#3-edu激活" class="headerlink" title="3.edu激活"></a>3.edu激活</h2><p><strong>拥有edu邮箱</strong></p><ul><li>这个基本每所大学都会给学生允许申请免费的校园邮箱，所有edu邮箱的格式是:学号<a href="mailto:+@stu.edu.cn" target="_blank" rel="noopener">+@stu.edu.cn</a></li></ul><p>以桂工的校园邮箱申请为例：</p><ul><li><p>进入桂工一站式服务中心 <a href="http://ca.glut.edu.cn:8888/zfca/login?yhlx=all&amp;login=0122579031373493746&amp;url=" target="_blank" rel="noopener">点此进入</a></p></li><li><p><font color="orange">使用“账号”方式登录</font></p></li><li><p>账号为：学号+校园网账户密码（或自己设置密码登入）</p></li><li><p>点击下图中“申请个人邮箱”</p></li></ul><p><img src="http://cdn.lyhzone.com/article_img/20200422114417.png" alt="邮箱"></p><ul><li>按照引导如实填写个人信息即可，1至2个工作日即可申请完毕。</li></ul><p><strong>官网注册账户</strong></p><ul><li><p>注册地址<a href="https://www.jetbrains.com/shop/eform/students" target="_blank" rel="noopener">网址</a>,使用edu邮箱注册。</p></li><li><p>填写相应内容，项目比较多，觉得有困难就下个翻译插件，右键翻译吧 记得选<font color="orange"> I’m a student</font> 就好</p></li><li><p>邮箱确认，激活账户</p></li><li><p>一般情况下，很快邮箱就能收到JetBrains发来的验证邮件了，确认激活就行了</p></li><li><p>好了，到此为止了。你可以使用你的账户登录JetBrains的软件了！</p></li></ul><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 软件程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> eclipse </tag>
            
            <tag> IDEA </tag>
            
            <tag> IDE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开站之后的感言</title>
      <link href="/2020/03/24/open/"/>
      <url>/2020/03/24/open/</url>
      
        <content type="html"><![CDATA[<h1 id="简短介绍"><a href="#简短介绍" class="headerlink" title="简短介绍"></a>简短介绍</h1><p>在这个long long long time的暑假里，除了每天上网课打游戏就是练单簧管为开学做准备，恰好在上Javaweb的课程，就把个人网站捣鼓了出来。<br>倒腾了一个多月，目前这个版本已经可以使用了（但估计还存在隐藏BUG），之后还会继续优化一些地方以及增加功能。<br>该网站采用了hexo+github的架构搭建，考虑到访问速度的问题，我准备了这个lyhzone.com的国际域名顺带部署了一台阿里云服务器（但是带宽比较窒息，所以加载速度还是稍稍有点感人）。<br>最后，希望你能访问愉快，出现问题请直接联系我，十分感谢！<br>  tips：<br>  由于网站图片过多，初次加载可能会持续10-15s</p><hr><h2 id="关于图片"><a href="#关于图片" class="headerlink" title="关于图片"></a>关于图片</h2><ul><li>考虑到版权问题，本站除文章内部图片外出现的所有图片（主背景，轮换背景，文章背景，相册等）都是本人的摄影作品。<img src="http://cdn.lyhzone.com/article_img/20200422151537.png" alt="风光"></li><li>如文章内部需引用他人图片将会注明。</li><li>可见————不会摄影的乐手不是好程序员（大错误）</li></ul><h2 id="网站内容"><a href="#网站内容" class="headerlink" title="网站内容"></a>网站内容</h2><p><strong>发布博客</strong>:</p><ul><li>博客的内容将主要涵盖JAVA/后端/前端和其他方面的内容</li><li>不定时发布课程作业、课程设计作品</li><li>学习及实践中的疑难点及出现bug后的解决历程</li><li>标签、分类、归档是对发布的博客进行归档分类，便于日后查找</li><li>偶尔发布心情、随想（ssr几率）</li></ul><p> <strong>摄影图床</strong>:</p><ul><li>随时发布我最新的摄影作品，类型包含但不限于人像、风景、产品</li><li>定期筛图，去除一些质量比较差的图片，见证进步    </li><li>将风景图放入每日轮换背景库中，你每天点开都是一个新的惊喜</li></ul><p><strong>音乐：</strong></p><ul><li>精心选曲，实力安利，高品质音源来自各大音乐平台，你倒是听听呗！！<img src="http://cdn.lyhzone.com/article_img/20200422151724.png" alt="音乐"></li><li>偏向：ACG，管弦及交响乐，箫、单簧管、长笛、小提琴等乐器的纯音</li><li>开学后如果有时间自己大概可能也许会录一些 单簧管&amp;钢琴 箫&amp;未知的曲子再上传上来。</li></ul><p><strong>关于我：</strong></p><ul><li>关于你个头啊，简历都没有！看个锤子（某神秘人物说道）</li><li>也许以后会丰富吧..吧..</li></ul><hr><p><strong>持续更新中…</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> web开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
